Прототип библиотеки для построения линейных графиков с помощью Web-Canvas

Данный прототип:
- самообновляется при воздействии триггеров
- выводит подсказки по точкам графика
- зумирует график по оси х и у
- двигается курсором (перетаскивание)

Минимальный размер canvas - height: 350, width: 400
Если размер будет меньше, библиотека переопределит его


Инициализация графика
const diagram = new Diagram(ctx, {
  type: "line",
  data: {
    dataLines: [
      {
         dataArr: [
           [233, "Russia"],
           [757, "England"],
           [222, "Luxemburg"],
         ]
      },
      {
         dataArr: [
           [140, "Russia"],
           [530, "England"],
           [250, "Luxemburg"],
         ]
      },
    ]
  }).createDiagram()
// Указанные выше параметры обязательны для инициализации


Инициализация графика с дополнительыми параметрами
const diagram = new Diagram(ctx, {
  type: "line",
   scale: {
     xScaleLabel: "Countries", // название оси х. По умолчанию X
     yScaleLabel: "People", // название оси у. По умолчанию Y
     scaleStyle: { // объект стиля осей
       font: "14px Helvetica", // шрифт на осях. По умолчанию "14px Helvetica"
       scaleColor: "#444", // цвет основных осей и текста на осях. По умолчанию #444
       scaleWidth: 2, // толщина основных осей. По умолчанию 2
       subScaleColor: "#bbb", // цвет дополнительных осей. По умолчанию #ccc
       subScaleWidth: 1, // толщина дополнительных осей. По умолчанию 1
     },
   },
  data: {
    dataLines: [
       {
         name: "customers", // имя параметра. По умолчанию - "Линия n"
         dataArr: [ 
           [140, "Russia"],
           [530, "England"],
           [250, "Luxemburg"],
         ],
         color: "green", // цвет линии. По умолчанию - берется из массива
       },

       {
         name: "sellers",
         dataArr: [
           [250, "Russia"],
           [320, "England"],
           [110, "Luxemburg"],
         ],
       },

       {
         name: "bubbles",
         dataArr: [
           [900, "Russia"],
           [432.26, "England"],
           [800, "Luxemburg"],
         ],
         color: "red",
       }
    ],
     dataStyle: { // стиль графика (кроме цвета линий)
       strokeWidth: 2, // толщина линий. По умолчанию 2
       points: "circle", // стиль точки. По умолчанию circle
       pointsRadius: 4, // радиус точки. По умолчанию 4
     },
  },
}).createDiagram();



Редактирование стилей графика
метод diagram.changeStyles({}) //  принимает объект, свойства которого могут быть scale {} или data {}.
// В объекте scale - свойства font (string), scaleColor (string), scaleWidth (number), subScaleColor (string), subScaleWidth (number)
// В объекте data - свойства strokeWidth (number), pointsRadius (number), points (string)


diagram.changeStyles({
  scale: {
    font: "14px Arial",
    scaleColor: "#242424",
    scaleWidth: 4,
    subScaleColor: "#000",
    subScaleWidth: 3,
  },
});
diagram.changeStyles({
  data: { pointsRadius: 6, strokeWidth: 2, points: "circle" },
});


/*
Предстоящая работа над библиотекой
- рефакторинг кода (в т.ч., вынести этапы отрисовки графиков в отдельные функции(методы класса), а также, целесообразно ли использование большого многоуровневого объекта, возможно разделение данных на несколько небольших объектов)
- обработка ошибок
- добавление зума без слайдеров
- поворот значений по оси х при недостаточном месте для отображения
- верхний блок с параметрами, левый блок по оси Y, сделать изменяемыми по высоте/ширине в зависимости от количества параметров/значений
- добавление методов к классу Diagram по добавлению/изменению/удалению части данных
- добавление методов по управлению стилями графиков, параметров и всплывающей подсказки
- генерация отметок на оси с диапазоном данных по круглым числам (например, при диапазоне от 8 до 46 отметки пусть будут 10 20 30 40)
- ограничение движения графика путем перетаскивания за его пределы
- обеспечение работы на мобильных устройствах
*/